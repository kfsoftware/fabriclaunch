"use strict";(self.webpackChunkfabriclaunch_docs=self.webpackChunkfabriclaunch_docs||[]).push([[2710],{4527:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});var i=r(1085),o=r(1184);const t={sidebar_position:1},a="Deployment on DigitalOcean",s={id:"deployments/digitalocean",title:"Deployment on DigitalOcean",description:"Terraform project",source:"@site/docs/deployments/digitalocean.md",sourceDirName:"deployments",slug:"/deployments/digitalocean",permalink:"/fabriclaunch/docs/deployments/digitalocean",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/deployments/digitalocean.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/fabriclaunch/docs/installation"},next:{title:"Using Docker Compose",permalink:"/fabriclaunch/docs/platform/docker-compose"}},l={},c=[{value:"Terraform project",id:"terraform-project",level:2},{value:"main.tf",id:"maintf",level:3},{value:"variables.tf",id:"variablestf",level:3},{value:"Execute Terraform",id:"execute-terraform",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"deployment-on-digitalocean",children:"Deployment on DigitalOcean"}),"\n",(0,i.jsx)(n.h2,{id:"terraform-project",children:"Terraform project"}),"\n",(0,i.jsx)(n.h3,{id:"maintf",children:"main.tf"}),"\n",(0,i.jsx)(n.p,{children:"To provision virtual machines on DigitalOcean, you can use Terraform. Terraform is an open-source infrastructure as code software tool that provides a consistent CLI workflow to manage hundreds of cloud services. Terraform codifies cloud APIs into declarative configuration files."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",metastring:'title="main.tf"',children:'terraform {\n  required_providers {\n    digitalocean = {\n      source  = "digitalocean/digitalocean"\n      version = "~> 2.0"\n    }\n  }\n}\n\nprovider "digitalocean" {\n  token = var.do_token\n}\n\n// create ssh key\nresource "tls_private_key" "ssh_key" {\n  algorithm = "RSA"\n  rsa_bits  = 4096\n}\n\nresource "digitalocean_ssh_key" "default" {\n  name       = "Terraform Example"\n  public_key = tls_private_key.ssh_key.public_key_openssh\n}\n# Write private key to file\nresource "local_file" "private_key" {\n  content         = tls_private_key.ssh_key.private_key_pem\n  filename        = "${path.module}/id_rsa"\n  file_permission = "0600"\n}\n\n# Write public key to file\nresource "local_file" "public_key" {\n  content         = tls_private_key.ssh_key.public_key_openssh\n  filename        = "${path.module}/id_rsa.pub"\n  file_permission = "0644"\n}\n\nresource "digitalocean_droplet" "web" {\n  count    = length(var.regions)\n  image    = "ubuntu-24-04-x64"\n  name     = "hlf-${var.vm_names[count.index]}"\n  region   = var.regions[count.index]\n  size     = "s-1vcpu-1gb" # $6/month\n  ssh_keys = [digitalocean_ssh_key.default.fingerprint]\n\n}\nresource "null_resource" "install_fabriclaunch" {\n  count      = length(var.regions)\n  depends_on = [digitalocean_droplet.web]\n  provisioner "remote-exec" {\n    inline = [\n      "wget https://fabriclaunch.com/fabriclaunch && chmod +x fabriclaunch && mv fabriclaunch /usr/local/bin/fabriclaunch",\n    ]\n    connection {\n      type        = "ssh"\n      user        = "root"\n      private_key = tls_private_key.ssh_key.private_key_pem\n      host        = digitalocean_droplet.web[count.index].ipv4_address\n    }\n  }\n  triggers = {\n    always_run = "${timestamp()}"\n  }\n}\n\nresource "null_resource" "install_go" {\n  count      = length(var.regions)\n  depends_on = [digitalocean_droplet.web]\n  provisioner "remote-exec" {\n    inline = [\n      "wget https://go.dev/dl/go1.22.5.linux-amd64.tar.gz",\n      "tar -C /usr/local -xzf go*.tar.gz",\n      "echo \'export PATH=$PATH:/usr/local/go/bin\' >> ~/.bashrc",\n    ]\n    connection {\n      type        = "ssh"\n      user        = "root"\n      private_key = tls_private_key.ssh_key.private_key_pem\n      host        = digitalocean_droplet.web[count.index].ipv4_address\n    }\n  }\n}\n\n# Null resource for remote-exec, one for each droplet\nresource "null_resource" "fabric_setup" {\n  count = length(var.regions)\n\n  # Ensure this runs after the droplet is created\n  depends_on = [digitalocean_droplet.web]\n\n  # Use remote-exec provisioner to run the script\n  provisioner "remote-exec" {\n    inline = [\n      "curl -sSLO https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh && chmod +x install-fabric.sh",\n      "./install-fabric.sh --fabric-version 2.5.9 binary",\n      "sudo mv bin/configtxgen /usr/local/bin/configtxgen",\n      "sudo mv bin/configtxlator /usr/local/bin/configtxlator",\n      "sudo mv bin/cryptogen /usr/local/bin/cryptogen",\n      "sudo mv bin/discover /usr/local/bin/discover",\n      "sudo mv bin/fabric-ca-client /usr/local/bin/fabric-ca-client",\n      "sudo mv bin/fabric-ca-server /usr/local/bin/fabric-ca-server",\n      "sudo mv bin/ledgerutil /usr/local/bin/ledgerutil",\n      "sudo mv bin/orderer /usr/local/bin/orderer",\n      "sudo mv bin/osnadmin /usr/local/bin/osnadmin",\n      "sudo mv bin/peer /usr/local/bin/peer",\n      "sudo wget https://github.com/cloudflare/cfssl/releases/download/v1.6.5/cfssl_1.6.5_linux_amd64 -O /usr/local/bin/cfssl",\n      "sudo wget https://github.com/cloudflare/cfssl/releases/download/v1.6.5/cfssljson_1.6.5_linux_amd64 -O /usr/local/bin/cfssljson",\n      "sudo chmod +x /usr/local/bin/cfssl",\n      "sudo chmod +x /usr/local/bin/cfssljson"\n    ]\n  }\n\n  # Connection details for the remote-exec provisioner\n  connection {\n    type        = "ssh"\n    user        = "root"\n    private_key = tls_private_key.ssh_key.private_key_pem\n    host        = digitalocean_droplet.web[count.index].ipv4_address\n  }\n\n  # Trigger recreation of this resource when the droplet changes\n  triggers = {\n    droplet_id = digitalocean_droplet.web[count.index].id\n  }\n}\n\noutput "droplet_ips" {\n  value = {\n    for droplet in digitalocean_droplet.web :\n    droplet.name => droplet.ipv4_address\n  }\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"variablestf",children:"variables.tf"}),"\n",(0,i.jsxs)(n.p,{children:["Then, you need to declare the variables in a ",(0,i.jsx)(n.code,{children:"variables.tf"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",metastring:'title="variables.tf"',children:'variable "do_token" {\n  description = "DigitalOcean API Token"\n  type        = string\n  sensitive   = true\n}\n\nvariable "regions" {\n  description = "List of regions for droplet deployment"\n  type        = list(string)\n  default     = ["nyc1", "fra1", "blr1"]\n}\nvariable "vm_names" {\n  description = "List of VM names"\n  type        = list(string)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To avoid hardcoding the DigitalOcean API token in the ",(0,i.jsx)(n.code,{children:"terraform.tfvars"})," file, you can use the ",(0,i.jsx)(n.code,{children:"TF_VAR_do_token"})," environment variable:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export TF_VAR_do_token="your_digitalocean_api_token"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Finally, you can create a ",(0,i.jsx)(n.code,{children:"terraform.tfvars"})," file to specify the values for the variables:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",metastring:'title="terraform.tfvars"',children:'regions = ["nyc1", "fra1", "blr1"]\n\nvm_names = ["org1", "org2", "org3"]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"execute-terraform",children:"Execute Terraform"}),"\n",(0,i.jsx)(n.p,{children:"To execute the Terraform project, you can run the following commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"terraform init\nterraform apply\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, you can access the virtual machines using the private key file ",(0,i.jsx)(n.code,{children:"id_rsa"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ssh -i id_rsa root@<droplet_ip>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each of the virtual machines will have the FabricLaunch CLI installed. You can use the FabricLaunch CLI to create nodes and networks on the virtual machines."}),"\n",(0,i.jsxs)(n.p,{children:["You can see the ",(0,i.jsx)(n.a,{href:"/fabriclaunch/docs/getting-started",children:(0,i.jsx)(n.code,{children:"Getting started"})})," guide to learn how to deploy the FabricLaunch CLI. The IPs is the only thing that changes, apart from not using the 'localho.st' domain, in this case, you need to use the ip as the domain."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1184:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var i=r(4041);const o={},t=i.createContext(o);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);